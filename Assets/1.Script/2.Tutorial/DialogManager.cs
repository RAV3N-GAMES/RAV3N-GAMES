using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class DialogManager : MonoBehaviour {
    public TaskManager taskManager;

    public DialogText[] dialogText;

    string[] dialogs = 
        {
        //0~9
        "반갑습니다, 저는 51구역의 2대 관리자\nMr.RAVEN 입니다.",
        "대한민국의 유명 영상 크리에이터였던\n당신을 관심 있게 지켜보고 있었죠.",
        "모험을 좋아하고 새로운 도전을 즐기던\n당신의 자질은 51구역의 관리자로써\n큰 성과를 이루어낼 것으로 생각합니다!",
        "현재 51구역은 현상금과 기밀을 노리는\n외부의 침입자로부터 골머리를 앓고있는\n상황입니다.",
        "51구역은 외계와의 교류를 통해\n비밀리에 연구를 진행하고 있죠,",
        "외부의 침입자에 의해 이 연구 정보가\n외부로 빠져 나간다면, 세계의 정서는\n극도로 혼란스러워 질 것입니다.",
        "51구역을 관리하게 될 당신에게, 지금부터\n침입자로부터 안전하게 51구역을 지킬\n여러가지 방법들을 알려드릴 겁니다.",
        "그럼 시작해볼까요?",
        "조명이 비치는 부분을 제외한 나머지가\n어두운 것이 보이시나요?",
        "지금이 밤이라 그렇답니다. 침입자들은\n낮에 쳐들어오기 때문에 저희는 밤 동안\n침입에 대비해야 하죠.",
        //10~19
        "위쪽에 보이는 별 속의 숫자는 현재 저희\n시설의 보안 등급입니다. CIA에서 내건\n현상금 수치에 따라 등급도 변경됩니다.",
        "별모양 옆의 숫자가 바로 현상금입니다.\n침입자들이 목적을 달성하느냐 마느냐에\n따라 수치가 오르락 내리락 하게 됩니다.",
        "그 아래에 보이는 막대는, 현재 보안 등급에\n책정된 현상금을 눈으로 보기 쉽게 표현한\n것입니다.",
        "쉽게 말해, 저 막대가 가득 차게 되면 보안\n등급을 한 단계 상승시키고, 반대로\n비어버리면 등급을 하락시키는 겁니다.",
        "현상금이 올라갈수록 침입자들의 수준도\n높아져서 상대하기 어렵게 됩니다.\n따라서 우리도 보안 등급을 올리는거죠.",
        "보안 등급은 최소 4단계에서 최대 25단계\n까지 구분해 두었으니 염두에 두시기\n바랍니다.",
        "바로 오른쪽의 동전 모양은 현재 저희\n시설이 보유한 금액의 수치입니다. 이 돈을\n사용해서 시설의 보안을 유지해야 합니다.",
        "여기 누가 봐도 중요하게 보이는 이 건물은\n저희 시설의 거점입니다. 당신의 목적은\n결국 이 건물을 지키는 것이 됩니다.",
        "여기 당신이 지금 보고 있는 방이 녹색으로\n표시되고 있습니다. 시점을 다른 쪽으로\n이동시켜 볼까요?",
        "보고 있는 방의 표시가 바뀐 것을 눈치\n채셨나요?",
        //20~29
        "방의 구분은 이처럼 울타리로 구분되어\n있으며, 당신이 현재 보유하고 있는 방의\n개수는 4개입니다.",
        "이쪽에는 당신이 보안을 지키기 위해 활용\n가능한 수단들이 항목별로 구분되어\n있습니다. 하나씩 설명을 드리자면,",
        "건물은 침입자의 경로를 변경하는 데에 그\n목적이 있습니다. 길이 막혔다면 일단은\n돌아가게 만드는 거죠.",
        "한번 보겠습니다. 잘 따라오세요.",
        "건물의 목록 중 이미 개발되어 설치할 수\n있는 건물은 동전 모양의 버튼이 표시되어\n있으며,",
        "아직 개발되지 않아 설치할 수 없는 건물은\n자물쇠 모양과 함께 잠금 표시가 되어 있습\n니다.",
        "건물 목록 중, 왼쪽에서 두 번째에 위치한\n건물을 선택해 볼까요?",
        "이 건물의 이름은 신식 연구소군요.\n이처럼 목록에서 건물을 선택하게 되면,\n선택한 건물의 정보가 등장하게 됩니다.",
        "아직 개발되지 않았기 때문에, 건물 목록에\n표시되었던 것처럼 자물쇠와 함께 개발에\n필요한 가격이 표시되어 있습니다.",
        "이 건물을 개발해보도록 하죠.",
        //30~39
        "개발이 되면 이처럼, 자물쇠가 사라지고\n대신 이 건물을 설치할 때 필요한 비용이\n표시됩니다.",
        "정보창도 동일하게 변경되죠.\n한번 볼까요?",
        "보시는 바와 같이, 개발 비용이 있던 자리가\n동전모양과 함께 설치 비용으로 바뀌었죠?\n그 옆의 방패 모양은 이 건물을 강화할 때",
        "필요한 가격이 표시됩니다.\n강화를 하면 능력치가 상승하게 됩니다.\n한번 해보겠습니다.",
        "강화를 하면 능력치가 상승하기 때문에\n설치에 필요한 가격 또한 상승하게 됩니다.\n상승한 능력치도 확인해보겠습니다.",
        "설치에 필요한 가격, 다음 단계로 강화에\n필요한 금액, 건물의 체력 모두 늘어났네요.\n자, 모두 확인했으면 직접 설치해봅시다.",
        "원하는 위치에 건물을 가져다 놓으면\n이처럼 3개의 단추가 나타나게 됩니다.\n녹색 단추를 선택하면 이 위치에 건물을",
        "설치하고, 적색 단추를 선택하면 설치를\n취소하게 됩니다. 왼쪽 위의 회전 단추는\n선택하면 건물이 90º 회전하게 됩니다.",
        "회전 단추는 가로와 세로의 길이가 다른\n건물에만 등장하므로 참고하시기 바랍니다.\n설치를 계속 해보겠습니다.",
        "설치를 하면 보시는 바와 같이, 설치 비용\n만큼 보유하고 있던 금액이 감소하게 되죠.\n설치된 건물을 길게 선택해 보세요.",
        //40~49
        "설치된 건물의 정보에는 이처럼 세 개의\n단추가 나타납니다. 체력이 닳았을 때는\n회복 단추를 선택하여 회복시킬 수 있고,",
        "이 건물을 없애고 싶다면 우측의 해체\n단추를 선택하여 해체할 수 있습니다.\n해체하면 약간의 금액을 획득하게 됩니다.",
        "참고로, 이미 설치된 건물은 강화시켜도\n적용되지 않습니다. 더 좋은 성능의 건물을\n사용하고 싶다면 새로 설치해야 합니다.",
        "건물에 대한 설명은 이것으로 마칠게요.\n다음은 용병에 관한 내용입니다.",
        "용병은 실질적으로 침입자들을 저지하는\n역할을 합니다. 각각의 용병들마다 가진\n능력이 다르므로 잘 확인하고 배치하세요.",
        "다른 항목들은 건물과 비슷해서 이해하기\n쉽겠지만, 기술 재사용 조건은 바로 이해가\n안되실 겁니다.",
        "기술 재사용 조건이란, 이 용병이 기술을\n사용하기 위해 공격을 몇 번 해야 하는지\n나타내는 것입니다.",
        "각 용병마다 어떤 기술을 갖고 있는지는\n정보를 자세히 보시면 알 수 있습니다.\n용병을 배치해봅시다.",
        "용병은 배치할 때 이렇게 원 모양의 영역이\n표시됩니다. 용병은 이 영역 안에 침입자가\n들어오면 인식하고 공격하기 시작합니다.",
        "침입자가 방의 어느 쪽 문으로 들어올 지\n모르기 때문에 고민을 거듭한 후 배치해야\n합니다.",
        //50~59
        "배치 후에도 위치변경을 선택하면 언제든\n인식 범위를 확인할 수 있으니 잘 활용하길\n바랍니다. 마저 배치해 볼까요?",
        "계속 보고 따라만 하니 지루하시죠?\n용병을 배치했으니 실제로 전투를 한번\n진행해보도록 하겠습니다.",
        "전투는 낮에 이루어지는데, 그날의 전투가\n끝나면 이렇게 일일 보안업무 보고서가\n출력됩니다.",
        "침입자는 4명이 하나의 집단으로 등장하게\n됩니다. 집단을 전부 제압하면 제압 여부\n확인란 중 성공에, 집단을 전부 제압하지",
        "못하면 실패에 표시됩니다.\n침입자들은 최대 3개 집단까지 등장하고,\n각 집단별로 목적이 다릅니다.",
        "51구역 곳곳에 흩어져있는 기밀을 목표로\n들어오는 기밀탈취단과, CIA에서 책정한\n현상금을 획득하기 위해 거점을 노리는",
        "현상금사냥단으로 구분됩니다.\n일일 보안업무 보고서에서 집단의 목적을\n확인할 수 있는데요.",
        "집단 뒤의 배경이 파란색이면 기밀탈취단,\n빨간색이면 현상금사냥단이니 기억하고\n계시기 바랍니다.",
        "일일 재산피해 보고서에서는 전투 후 어떤\n것을 얼마나 잃었는지 알아볼 수 있습니다.",
        "체력이 닳았더라도 건재한 건물과 용병은\n표시되지 않습니다.\n결재를 하고 나면 다시 밤이 됩니다.",
        //60~69
        "지도에 작은 점들이 보이시나요?\n현재 51구역에 배치되어 있는 방어수단이\n표시되고 있습니다.",
        "우측에 있는 큰 점들과 색깔을 맞춰보면\n어떤 방어수단이 어디에 어떻게 배치되어\n있는지 확인할 수 있습니다.",
        "이곳에서는 현재 당신이 보고 있는 방에\n배치된 방어수단의 개수를 항목별로\n확인할 수 있습니다.",
        "왼쪽 위에 있는 피해현황을 선택해보세요.",
        "피해현황이 선택된 상태일 때, 지도에는\n지난 전투로 인해 피해를 입은 건물과\n용병만이 표시됩니다.",
        "이때 우측에 표시되는 숫자는 보고 있는 방\n뿐만이 아니라, 51구역 전체에서 피해를\n입은 건물과 용병을 나타냅니다.",
        "전체회복 단추는 체력이 가득 채워져있지\n않은 건물이나 용병을 모두 회복시킵니다.",
        "보유하고 있는 금액이 전체회복에 필요한\n금액보다 부족하면, 전체회복을 시도해도\n취소됩니다.",
        "보안등급이 한 단계 상승하면 당신은\n지도를 열었을 때 이런 장면을 마주하게\n됩니다.",
        "여기 파란색으로 표시된 영역 중 한 군데를\n선택하면 즉시 그 방이 확장됩니다.",
        //70~79
        "당신이 가질 수 있는 방의 최대 개수는\n당신이 가장 높게 올린 보안등급의 숫자와\n동일합니다.",
        "지도에서는 보고 있는 시점을 즉시 변경할\n수도 있습니다. 왼쪽에 있는 방으로 시점을\n옮겨보겠습니다.",
        "그럼, 옮겨진 방에서 함정과 기밀에 대해\n알아보도록 하겠습니다.",
        "함정은 용병들이 침입자들을 저지할 때\n도움을 주는 방어수단입니다. 용병처럼\n공격을 가하는 함정도 있고, 다른 장소로",
        "침입자를 날려버리거나 움직임을 멈추는\n등, 다양한 역할을 하게 됩니다. 각각의\n함정마다 설치하는 방법이 다르기 때문에",
        "하나씩 알아보도록 합니다.",
        "워프는 침입자가 밟으면 같은 방 내의 다른\n장소로 이동시키는 함정입니다. 따라서,\n입구와 출구를 함께 설치해야 합니다.",
        "입구와 출구를 서로 다른 방에 설치할 수는\n없습니다. 설치할 때는 입구를 먼저 설치한\n후에 이어서 출구를 설치하게 됩니다.",
        "한번 해보겠습니다.",
        "이렇게 하면 워프의 설치는 끝납니다.\n다음은 화염방사트랩에 대해 알아봅시다.",
        //80~89
        "화염방사트랩은 바닥이 아닌 건물 옆에\n설치되어, 일정 범위 안으로 들어오는\n침입자에게 불을 내뿜어 공격합니다.",
        "따라서, 방에 건물이 없으면 설치할 수도\n없죠. 아까 배운 대로 건물을 먼저 설치해\n보세요.",
        "자, 이제 건물 옆에 화염방사트랩을 설치해\n보세요.",
        "자, 이렇게 하면 화염방사트랩은 설치가\n완료됩니다. 이제 마지막 함정인 이동방해\n전류가 남았군요.",
        "이동방해전류는 두 건물 사이에 설치되어\n그곳을 지나는 침입자들에게 감전 공격을\n하는 함정입니다.",
        "설치가 가능한 건물 사이의 간격이 정해져\n있기 때문에, 설치하기 굉장히 까다롭죠.\n백문이 불여일견, 한번 해보겠습니다.",
        "이제 이 두 건물 사이에 이동방해전류를\n설치해봅시다.",
        "이로써 각 함정에 대한 설치방법을 모두\n알아보았습니다.\n마지막으로 기밀에 대해 알아보겠습니다.",
        "침입자들이 두 가지 부류로 나뉜다고 말씀\n드렸는데, 기억하고 계시죠? 기밀탈취단과\n현상금사냥단이 있습니다.",
        "기밀탈취단은 현상금사냥단보다 능력치가\n상대적으로 낮습니다. 기본적으로 이 두\n부류는 등장할 확률이 동일한데요.",
        //90~98
        "기밀을 설치해두면 기밀탈취단이 등장할\n확률이 상승합니다. 스스로 방어 난이도를\n조절할 수 있다는 말씀입니다.",
        "기밀은 다른 방어수단과 다르게, 현재 51\n구역의 보안등급에 따라 설치 가능 여부가\n결정됩니다.",
        "방어수단에 대해서는 모두 알려드린 것\n같군요. 아, 방어수단의 항목별로 방마다\n설치할 수 있는 개수가 다릅니다.",
        "방마다 건물은 20채, 용병은 3명, 함정은\n5개씩 설치가 가능합니다. 기밀은 51구역\n전체에 5개까지 설치 가능합니다.",
        "지금 표시되는 방 문 바로 앞자리는 어떤\n방어수단도 설치가 불가능합니다. 침입자\n막으려다 우리가 갇히면 안되겠죠?",
        "여기서는 침입자들의 부류에 따른 능력치,\n기밀탈취단과 현상금사냥단의 등장 확률을\n확인할 수 있습니다.",
        "투명화를 선택하면 이렇게 건물이 투명화\n됩니다. 건물을 빽빽하게 설치하면 그 뒤의\n다른 방어수단을 선택하기 어렵게 되는데,",
        "그 때 활용하기 좋은 보기 방식입니다.\n이로써 정말 인수인계가 끝났네요.\n수고하셨습니다.",
        "저에게 배운 것을 잊지 마시고 51구역의\n보안 유지에 최선을 다해주시기 바랍니다.\n감사합니다."
    };

    [Range(0f, 1f)]
    public float speed = 0.1f;

    public string[] conDialog;

    int charIdx = 0;
    public int strIdx = -1;
    int lineIdx = 0;
    int dialogTextIdx = 0;

    bool isPlaying = true;


    void Start()
    {
        InitDialog();
        StartCoroutine(AnimateDialog());
    }

    IEnumerator AnimateDialog()
    {
        while(true)
        {
            if (PlayAnimation())
            {
                dialogText[dialogTextIdx].ChangeText(lineIdx, conDialog[lineIdx].Substring(0, charIdx++));
                if (charIdx > conDialog[lineIdx].Length)
                {
                    if (lineIdx >= conDialog.Length - 1)
                    {
                        dialogText[dialogTextIdx].OnNextButton();
                        isPlaying = false;
                    }
                    else
                    {
                        charIdx = 0;
                        lineIdx++;
                    }
                }

                yield return new WaitForSeconds(speed);
            }
            else
            {
                for (int i = 0; i < conDialog.Length; i++)
                    dialogText[dialogTextIdx].ChangeText(i, conDialog[i]);

                dialogText[dialogTextIdx].OnNextButton();

                yield return new WaitUntil(PlayAnimation);
            }
        }
    }

    bool PlayAnimation()
    {
        return isPlaying && TaskManager.isDone;
    }

    void InitDialog()
    {
        charIdx = 0;
        lineIdx = 0;

        conDialog = dialogs[++strIdx].Split('\n');
        dialogTextIdx = conDialog.Length - 1;

        dialogText[dialogTextIdx].gameObject.SetActive(true);
        dialogText[dialogTextIdx].InitText();
    }



    public void ClickDiaolg()
    {
        if(!isPlaying)
        {
            if (strIdx >= dialogs.Length - 1)
                UnityEngine.SceneManagement.SceneManager.LoadScene("Loading");
            else
            {
                dialogText[dialogTextIdx].OffNextButton();
                dialogText[dialogTextIdx].gameObject.SetActive(false);

                InitDialog();
                isPlaying = true;

                taskManager.OnTask(strIdx);
            }
        }
        else
        {
            isPlaying = false;
        }
    }
}
